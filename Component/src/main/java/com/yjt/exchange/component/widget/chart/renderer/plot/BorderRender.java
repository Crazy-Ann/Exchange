package com.hynet.heebit.components.widget.chart.renderer.plot;import android.graphics.Canvas;import android.graphics.Paint.Style;import android.graphics.Path;import android.graphics.RectF;import com.hynet.heebit.components.widget.chart.utils.DrawUtil;public class BorderRender extends Border {    private RectF rectF = new RectF();    private Path path = null;    public BorderRender() {    }    /**     * 边框默认内边距     *     * @return 内边距     */    public int getBorderSpadding() {        return borderSpadding;    }    private void setPaintLineStyle() {        switch (getBorderLineStyle()) {            case SOLID:                break;            case DOT:                getLinePaint().setPathEffect(DrawUtil.getInstance().getDotLineStyle());                break;            case DASH:                //虚实线                getLinePaint().setPathEffect(DrawUtil.getInstance().getDashLineStyle());                break;        }    }    public void renderRect(Canvas canvas, RectF rect, boolean showBoxBorder, boolean showBackground) {        setPaintLineStyle();        switch (getBorderRectType()) {            case RECT:                if (showBackground)                    canvas.drawRect(rect, getBackgroundPaint());                if (showBoxBorder)                    canvas.drawRect(rect, getLinePaint());                break;            case ROUNDRECT:                if (showBackground)                    canvas.drawRoundRect(rect, getRoundRadius(), getRoundRadius(), getBackgroundPaint());                if (showBoxBorder)                    canvas.drawRoundRect(rect, getRoundRadius(), getRoundRadius(), getLinePaint());                break;        }    }    public void renderCapRect(Canvas canvas, RectF rect, float capHeight, boolean showBoxBorder, boolean showBackground) {        setPaintLineStyle();        if (null == path) path = new Path();        float centerX = rect.left + rect.width() * 0.5f;        float AngleH = capHeight;        float AngleY = rect.bottom;        path.moveTo(rect.left, rect.bottom);        path.lineTo(rect.left, rect.top);        path.lineTo(rect.right, rect.top);        path.lineTo(rect.right, rect.bottom);        path.lineTo(centerX + AngleH, AngleY);        path.lineTo(centerX, AngleY + AngleH);        path.lineTo(centerX - AngleH, AngleY);        path.close();        if (showBackground)            canvas.drawPath(path, getBackgroundPaint());        if (showBoxBorder)            canvas.drawPath(path, getLinePaint());        path.reset();    }    public void renderCapRound(Canvas canvas, RectF rect, float capHeight, boolean showBoxBorder, boolean showBackground) {        if (!showBackground) return;        setPaintLineStyle();        float centerX = rect.left + rect.width() * 0.5f;        float AngleH = capHeight;        float AngleY = rect.bottom;        if (null == rectF) rectF = new RectF();        rectF.left = rect.left + borderSpadding;        rectF.top = rect.top + borderSpadding;        rectF.right = rect.right - borderSpadding;        rectF.bottom = rect.bottom - borderSpadding;        getBackgroundPaint().setStyle(Style.FILL);        //getLinePaint().setStyle(Style.STROKE);        canvas.drawRoundRect(rectF, this.getRoundRadius(), this.getRoundRadius(), getBackgroundPaint());        if (null == path) path = new Path();        float pHeight = DrawUtil.getInstance().getPaintFontHeight(getBackgroundPaint());        path.moveTo(centerX + AngleH, AngleY - pHeight);        path.lineTo(centerX, AngleY + AngleH);        path.lineTo(centerX - AngleH, AngleY - pHeight);        path.close();        canvas.drawPath(path, getBackgroundPaint());        path.reset();    }    public void renderRound(Canvas canvas, RectF rect, float capHeight, boolean showBoxBorder, boolean showBackground) {        setPaintLineStyle();        if (null == rectF) rectF = new RectF();        rectF.left = rect.left + borderSpadding;        rectF.top = rect.top + borderSpadding;        rectF.right = rect.right - borderSpadding;        rectF.bottom = rect.bottom - borderSpadding;        if (showBackground)            canvas.drawRoundRect(rectF, this.getRoundRadius(), this.getRoundRadius(), getBackgroundPaint());        if (showBoxBorder)            canvas.drawRoundRect(rectF, this.getRoundRadius(), this.getRoundRadius(), getLinePaint());    }    /**     * 绘制边     *     * @param canvas 画布     * @param left   左边距     * @param top    上边距     * @param right  右边距     * @param bottom 底边距     */    public void renderBorder(String type, Canvas canvas, float left, float top, float right, float bottom) {        rectF.left = left + borderSpadding;        rectF.top = top + borderSpadding;        rectF.right = right - borderSpadding;        rectF.bottom = bottom - borderSpadding;        setPaintLineStyle();        switch (getBorderRectType()) {            case RECT:                if (type.equals("CHART")) {                    if (null != backgroundPaint)                        canvas.drawRect(rectF, backgroundPaint);                } else { //BORDER                    canvas.drawRect(rectF, getLinePaint());                }                break;            case ROUNDRECT:                if (type.equals("CHART")) {                    if (null != backgroundPaint)                        canvas.drawRoundRect(rectF, getRoundRadius(), getRoundRadius(), backgroundPaint);                } else { //BORDER                    canvas.drawRoundRect(rectF, getRoundRadius(), getRoundRadius(), getLinePaint());                }                break;        }    }}