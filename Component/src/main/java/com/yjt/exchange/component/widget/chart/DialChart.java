/** * Copyright 2014  XCL-Charts * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * @Project XCL-Charts * @Description Android图表基类库 * @author XiongChuanLiang<br                                                                                                                                                                                                                                                               />(xcl_168@aliyun.com) * @license http://www.apache.org/licenses/  Apache v2 License * @version v 1.3 */package com.hynet.heebit.components.widget.chart;import android.graphics.Canvas;import com.hynet.heebit.components.widget.chart.constant.ChartType;import com.hynet.heebit.components.widget.chart.constant.Location;import com.hynet.heebit.components.widget.chart.constant.RoundAxisType;import com.hynet.heebit.components.widget.chart.constant.RoundTickAxisType;import com.hynet.heebit.components.widget.chart.renderer.CirChart;import com.hynet.heebit.components.widget.chart.renderer.axis.RoundAxis;import com.hynet.heebit.components.widget.chart.renderer.axis.RoundAxisRender;import com.hynet.heebit.components.widget.chart.renderer.plot.PlotAttrInfo;import com.hynet.heebit.components.widget.chart.renderer.plot.PlotAttrInfoRender;import com.hynet.heebit.components.widget.chart.renderer.plot.Pointer;import com.hynet.heebit.components.widget.chart.renderer.plot.PointerRender;import java.util.ArrayList;import java.util.List;public class DialChart extends CirChart {    private static final int INIT_ANGLE = 135;    private static final int FIX_TOTAL_ANGLE = 270;    private float startAngle = 0.0f;    private float totalAngle = 0.0f;    private List<RoundAxis> roundAxes = new ArrayList<>();    //指针[默认1个，其它add]    private PointerRender pointerRender = null;    List<Pointer> pointers = new ArrayList<>();    //附加信息类    private PlotAttrInfoRender plotAttrInfoRender = null;    public DialChart() {        startAngle = INIT_ANGLE;        totalAngle = FIX_TOTAL_ANGLE;        if (null == plotAttrInfoRender)            plotAttrInfoRender = new PlotAttrInfoRender();    }    @Override    public ChartType getType() {        return ChartType.DIAL;    }    public void setStartAngle(float startAngle) {        this.startAngle = startAngle;    }    public void setTotalAngle(float totalAngle) {        this.totalAngle = totalAngle;    }    /**     * 返回图轴集合     *     * @return 集合     */    public List<RoundAxis> getPlotAxis() {        return roundAxes;    }    /**     * 返回额外的指针集合     *     * @return 指针集合     */    public List<Pointer> getPlotPointer() {        return pointers;    }    /**     * 附加信息绘制处理类     *     * @return 信息基类     */    public PlotAttrInfo getPlotAttrInfo() {        return plotAttrInfoRender;    }    /**     * 增加额外的指针     */    public void addPointer() {        pointers.add(new PointerRender());    }    /**     * 清掉指针信息     */    public void clearPlotPointer() {        if (null != pointers) pointers.clear();    }    /**     * 清空当前所有轴数据集合     */    public void clearPlotAxis() {        if (null != roundAxes) roundAxes.clear();    }    /**     * 清掉所有相关信息     */    public void clearAll() {        clearPlotPointer();        clearPlotAxis();        this.plotAttrInfoRender.clearPlotAttrInfo();    }    /**     * 返回指针绘制类     *     * @return 指针绘制类     */    public Pointer getPointer() {        if (null == pointerRender) pointerRender = new PointerRender();        return pointerRender;    }    /**     * 绘制指针     *     * @param canvas 画布     */    private void renderPointerLine(Canvas canvas) {        if (null == pointers) return;        float radius = getRadius();        for (int i = 0; i < pointers.size(); i++) {            PointerRender pointer = (PointerRender) pointers.get(i);            pointer.setParentRadius(radius);            pointer.setStartXY(plotAreaRender.getCenterX(), plotAreaRender.getCenterY());            pointer.setTotalAngle(totalAngle);            pointer.setStartAngle(startAngle);            pointer.render(canvas);        }        if (null == pointerRender) pointerRender = new PointerRender();        pointerRender.setStartXY(plotAreaRender.getCenterX(), plotAreaRender.getCenterY());        pointerRender.setTotalAngle(totalAngle);        pointerRender.setStartAngle(startAngle);        pointerRender.setParentRadius(getRadius());        pointerRender.render(canvas);    }    /**     * 增加 标签环形轴     *     * @param radiusPercentage 显示在总半径的指定比例所在位置     * @param labels           标签集合     */    public void addInnerTicksAxis(float radiusPercentage, List<String> labels) {        addTicksAxis(radiusPercentage, labels, RoundTickAxisType.INNER_TICKAXIS);    }    /**     * 增加 标签环形轴     *     * @param radiusPercentage 显示在总半径的指定比例所在位置     * @param labels           标签集合     */    public void addOuterTicksAxis(float radiusPercentage, List<String> labels) {        addTicksAxis(radiusPercentage, labels, RoundTickAxisType.OUTER_TICKAXIS);    }    private void addTicksAxis(float radiusPercentage, List<String> labels, RoundTickAxisType type) {        RoundAxisRender roundAxis = new RoundAxisRender();        roundAxis.setRoundAxisType(RoundAxisType.TICKAXIS);        roundAxis.setRadiusPercentage(radiusPercentage);        roundAxis.setAxisLabels(labels);        roundAxis.setRoundTickAxisType(type);        roundAxes.add(roundAxis);    }    /**     * 增加空心环形轴集合     *     * @param outerRadiusPercentage 外环显示在总半径的指定比例所在位置     * @param innerRadiusPercentage 内环显示在总半径的指定比例所在位置     * @param percentage            百分比     * @param color                 颜色     */    public void addStrokeRingAxis(float outerRadiusPercentage, float innerRadiusPercentage, List<Float> percentage, List<Integer> color) {        addRingAxis(outerRadiusPercentage, innerRadiusPercentage, percentage, color, null);    }    /**     * 增加空心环形轴集合     *     * @param outerRadiusPercentage 外环显示在总半径的指定比例所在位置     * @param innerRadiusPercentage 内环显示在总半径的指定比例所在位置     * @param percentage            百分比     * @param color                 产色     * @param labels                标签集合     */    public void addStrokeRingAxis(float outerRadiusPercentage, float innerRadiusPercentage, List<Float> percentage, List<Integer> color, List<String> labels) {        addRingAxis(outerRadiusPercentage, innerRadiusPercentage, percentage, color, labels);    }    /**     * 增加实心环形轴集合     *     * @param radiusPercentage 显示在总半径的指定比例所在位置     * @param percentage       百分比     * @param color            颜色     */    public void addFillRingAxis(final float radiusPercentage, final List<Float> percentage, final List<Integer> color) {        addRingAxis(radiusPercentage, 0.0f, percentage, color, null);    }    /**     * 增加实心环形轴集合     *     * @param radiusPercentage 显示在总半径的指定比例所在位置     * @param percentage       百分比     * @param color            颜色     * @param labels           标签集合     */    public void addFillRingAxis(float radiusPercentage, List<Float> percentage, List<Integer> color, List<String> labels) {        addRingAxis(radiusPercentage, 0.0f, percentage, color, labels);    }    /**     * 增加环形轴集合     *     * @param outerRadiusPercentage 外环显示在总半径的指定比例所在位置     * @param innerRadiusPercentage 内环显示在总半径的指定比例所在位置     * @param percentage            百分比     * @param color                 颜色     * @param labels                标签集合     */    public void addRingAxis(float outerRadiusPercentage, float innerRadiusPercentage, List<Float> percentage, List<Integer> color, List<String> labels) {        RoundAxisRender roundAxis = new RoundAxisRender();        roundAxis.setRoundAxisType(RoundAxisType.RINGAXIS);        roundAxis.setRadiusPercentage(outerRadiusPercentage);        roundAxis.setRingInnerRadiusPercentage(innerRadiusPercentage);        roundAxis.setAxisPercentage(percentage);        roundAxis.setAxisColor(color);        roundAxis.setAxisLabels(labels);        roundAxes.add(roundAxis);    }    /**     * 增加弧线轴     *     * @param radiusPercentage 显示在总半径的指定比例所在位置     */    public void addArcLineAxis(float radiusPercentage) {        RoundAxisRender roundAxis = new RoundAxisRender();        roundAxis.setRoundAxisType(RoundAxisType.ARCLINEAXIS);        roundAxis.setRadiusPercentage(radiusPercentage);        roundAxes.add(roundAxis);    }    /**     * 增加填充环形轴     *     * @param radiusPercentage 显示在总半径的指定比例所在位置     * @param color            颜色     */    public void addFillAxis(float radiusPercentage, int color) {        RoundAxisRender roundAxis = new RoundAxisRender();        roundAxis.setRoundAxisType(RoundAxisType.FILLAXIS);        roundAxis.setRadiusPercentage(radiusPercentage);        List<Integer> lstColor = new ArrayList<>();        lstColor.add(color);        roundAxis.setAxisColor(lstColor);        roundAxes.add(roundAxis);    }    /**     * 增加填充圆轴     *     * @param radiusPercentage 显示在总半径的指定比例所在位置     * @param color            颜色     */    public void addCircleAxis(float radiusPercentage, int color) {        RoundAxisRender roundAxis = new RoundAxisRender();        roundAxis.setRoundAxisType(RoundAxisType.CIRCLEAXIS);        roundAxis.setRadiusPercentage(radiusPercentage);        List<Integer> lstColor = new ArrayList<>();        lstColor.add(color);        roundAxis.setAxisColor(lstColor);        roundAxes.add(roundAxis);    }    /**     * 增加线轴     *     * @param location         位置     * @param radiusPercentage 占总半径的指定比例     */    public void addLineAxis(Location location, float radiusPercentage) {        RoundAxisRender roundAxis = new RoundAxisRender();        roundAxis.setRoundAxisType(RoundAxisType.LINEAXIS);        roundAxis.setRadiusPercentage(radiusPercentage);        roundAxis.setLineAxisLocation(location);        //没心情搞了，不弄这个线类型及箭头啥的了        //roundAxis.setLineStyle(lineStyle);        //roundAxis.setLineCap(dotStyle);        roundAxes.add(roundAxis);    }    /**     * 绘制图     */    protected void renderPlot(Canvas canvas) {        float radius = getRadius();        //画上各组环形轴        for (int i = 0; i < this.roundAxes.size(); i++) {            RoundAxisRender roundAxis = (RoundAxisRender) roundAxes.get(i);            roundAxis.setCenterXY(plotAreaRender.getCenterX(), plotAreaRender.getCenterY());            roundAxis.setAngleInfo(totalAngle, startAngle);            roundAxis.setOrgRadius(radius);            roundAxis.render(canvas);        }        //绘制附加信息        plotAttrInfoRender.renderAttrInfo(canvas, plotAreaRender.getCenterX(), plotAreaRender.getCenterY(), this.getRadius());        //最后再画指针        renderPointerLine(canvas);        roundAxes.clear();        pointers.clear();        plotAttrInfoRender.clearPlotAttrInfo();    }    @Override    protected boolean postRender(Canvas canvas) {        super.postRender(canvas);        //绘制图表        renderPlot(canvas);        return true;    }}