package com.hynet.heebit.components.widget.chart.renderer.plot;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Paint.Style;import com.hynet.heebit.components.widget.chart.constant.LineStyle;public class PlotGrid {    //横向网格线    private Paint gridLineHorizontalPaint = null;    //竖向网格线    private Paint gridLineVerticalPaint = null;    //是否显示横向网格线    private boolean gridLinesHorizontalVisible = false;    //是否显示竖向网格线    private boolean gridLinesVerticalVisible = false;    //是否显示奇数行填充色    private boolean oddRowBackgroundColorVisible = false;    //是否显示偶数行填充色    private boolean evenRowBackgroundColorVisible = false;    //横向网格线    private Paint oddBackgroundColorPaint = null;    //竖向网格线    private Paint evenBackgroundColorPaint = null;    // Solid、Dot、Dash。    private LineStyle mHorizontalLineStyle = LineStyle.SOLID;    private LineStyle mVerticalLineStyle = LineStyle.SOLID;    public PlotGrid() {    }    private void initEvenBgColorPaint() {        if (null == evenBackgroundColorPaint) {            evenBackgroundColorPaint = new Paint();            evenBackgroundColorPaint.setStyle(Style.FILL);            evenBackgroundColorPaint.setColor(Color.rgb(239, 239, 239));            evenBackgroundColorPaint.setAntiAlias(true);        }    }    private void initOddBgColorPaint() {        if (null == oddBackgroundColorPaint) {            oddBackgroundColorPaint = new Paint();            oddBackgroundColorPaint.setStyle(Style.FILL);            oddBackgroundColorPaint.setColor(Color.WHITE);            oddBackgroundColorPaint.setAntiAlias(true);        }    }    private void initHorizontalLinePaint() {        if (null == gridLineHorizontalPaint) {            gridLineHorizontalPaint = new Paint();            gridLineHorizontalPaint.setAntiAlias(true);            gridLineHorizontalPaint.setStrokeWidth(1);            gridLineHorizontalPaint.setColor(Color.rgb(180, 205, 230));        }    }    private void initVerticalLinePaint() {        if (null == gridLineVerticalPaint) {            gridLineVerticalPaint = new Paint();            gridLineVerticalPaint.setColor(Color.rgb(180, 205, 230));            gridLineVerticalPaint.setStrokeWidth(1);            gridLineVerticalPaint.setAntiAlias(true);        }    }    /**     * 设置奇数行填充色     *     * @param color 填充色     */    public void setOddRowBackgroundColor(int color) {        oddBackgroundColorPaint.setColor(color);    }    /**     * 设置偶数行填充色     *     * @param color 填充色     */    public void setEvenRowBackgroundColor(int color) {        oddBackgroundColorPaint.setColor(color);    }    /**     * 显示横向网格线     */    public void showHorizontalLines() {        gridLinesHorizontalVisible = true;    }    /**     * 隐藏横向网格线     */    public void hideHorizontalLines() {        gridLinesHorizontalVisible = false;        if (null != gridLineHorizontalPaint) gridLineHorizontalPaint = null;    }    /**     * 返回是否显示横向网格线     *     * @return 是否显示     */    public boolean isShowHorizontalLines() {        return gridLinesHorizontalVisible;    }    /**     * 显示竖向网格线     */    public void showVerticalLines() {        gridLinesVerticalVisible = true;    }    /**     * 隐藏竖向网格线     */    public void hideVerticalLines() {        gridLinesVerticalVisible = false;        if (null != gridLineVerticalPaint) gridLineVerticalPaint = null;    }    /**     * 返回是否显示竖向网格线     *     * @return 是否显示     */    public boolean isShowVerticalLines() {        return gridLinesVerticalVisible;    }    /**     * 显示奇数行背景色     */    public void showOddRowBgColor() {        oddRowBackgroundColorVisible = true;    }    /**     * 隐藏奇数行背景色     */    public void hideOddRowBgColor() {        oddRowBackgroundColorVisible = false;        if (null != oddBackgroundColorPaint) oddBackgroundColorPaint = null;    }    /**     * 返回是否显示奇数行填充     *     * @return 是否填充     */    public boolean isShowOddRowBgColor() {        return oddRowBackgroundColorVisible;    }    /**     * 显示偶数行背景色     */    public void showEvenRowBgColor() {        evenRowBackgroundColorVisible = true;    }    /**     * 隐藏偶数行背景色     */    public void hideEvenRowBgColor() {        evenRowBackgroundColorVisible = false;        if (null != evenBackgroundColorPaint) evenBackgroundColorPaint = null;    }    /**     * 返回是否显示偶数行填充     *     * @return 是否填充     */    public boolean isShowEvenRowBgColor() {        return evenRowBackgroundColorVisible;    }    /**     * 开放横向网格线画笔     *     * @return 画笔     */    public Paint getHorizontalLinePaint() {        initHorizontalLinePaint();        return gridLineHorizontalPaint;    }    /**     * 开放竖向网格线画笔     *     * @return 画笔     */    public Paint getVerticalLinePaint() {        initVerticalLinePaint();        return gridLineVerticalPaint;    }    /**     * 开放奇数行填充画笔     *     * @return 画笔     */    public Paint getOddRowsBgColorPaint() {        initOddBgColorPaint();        return oddBackgroundColorPaint;    }    /**     * 开放偶数行填充画笔     *     * @return 画笔     */    public Paint getEvenRowsBgColorPaint() {        initEvenBgColorPaint();        return evenBackgroundColorPaint;    }    /**     * 返回竖向网格线当前绘制风格     *     * @return 绘制风格     */    public LineStyle getVerticalLineStyle() {        return mVerticalLineStyle;    }    /**     * 设置竖向网格线当前绘制风格     *     * @param style 绘制风格     */    public void setVerticalLineStyle(LineStyle style) {        mVerticalLineStyle = style;    }    /**     * 返回横向网格线当前绘制风格     *     * @return 绘制风格     */    public LineStyle getHorizontalLineStyle() {        return mHorizontalLineStyle;    }    /**     * 设置横向网格线当前绘制风格     *     * @param style 绘制风格     */    public void setHorizontalLineStyle(LineStyle style) {        mHorizontalLineStyle = style;    }}