package com.hynet.heebit.components.widget.actionsheet.adapter;import android.graphics.Color;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.TextView;import com.hynet.heebit.components.R;import com.hynet.heebit.components.utils.ViewUtil;import com.hynet.heebit.components.widget.actionsheet.ActionSheet;import com.hynet.heebit.components.widget.actionsheet.ActionSheetDivider;import com.hynet.heebit.components.widget.actionsheet.ActionSheetHeader;import com.hynet.heebit.components.widget.actionsheet.ActionSheetMenuItem;import com.hynet.heebit.components.widget.actionsheet.listener.OnMenuItemClickListener;import com.hynet.heebit.components.widget.actionsheet.listener.OnSheetItemListener;import java.util.List;import androidx.appcompat.widget.AppCompatImageView;import androidx.recyclerview.widget.RecyclerView;class ActionSheetAdapter extends RecyclerView.Adapter<ActionSheetAdapter.ViewHolder> {    private static final int TYPE_ITEM = 0;    private static final int TYPE_HEADER = 1;    private static final int TYPE_DIVIDER = 2;    private List<OnSheetItemListener> onSheetItemListeners;    OnMenuItemClickListener onMenuItemClickListener;    private int mode;    private int itemWidth;    private int itemGravity = View.NO_ID;    public ActionSheetAdapter(List<OnSheetItemListener> onSheetItemListeners, int mode, OnMenuItemClickListener onMenuItemClickListener) {        this.mode = mode;        this.onSheetItemListeners = onSheetItemListeners;        this.onMenuItemClickListener = onMenuItemClickListener;    }    public void setItemWidth(int width) {        itemWidth = width;    }    public void setItemGravity(int itemGravity) {        this.itemGravity = itemGravity;    }    public void setListener(OnMenuItemClickListener onMenuItemClickListener) {        this.onMenuItemClickListener = onMenuItemClickListener;    }    @Override    public int getItemViewType(int position) {        OnSheetItemListener onSheetItemListener = onSheetItemListeners.get(position);        if (onSheetItemListener instanceof ActionSheetMenuItem) {            return TYPE_ITEM;        } else if (onSheetItemListener instanceof ActionSheetDivider) {            return TYPE_DIVIDER;        } else if (onSheetItemListener instanceof ActionSheetHeader) {            return TYPE_HEADER;        }        return super.getItemViewType(position);    }    @Override    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        switch (mode) {            case ActionSheet.MODE_GRID:                View layout = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_sheet_grid, parent, false);                ViewGroup.LayoutParams layoutParams = layout.getLayoutParams();                layoutParams.width = itemWidth;                layout.setLayoutParams(layoutParams);                return new ItemViewHolder(layout);            case ActionSheet.MODE_LIST:                switch (viewType) {                    case TYPE_HEADER:                        return new HeaderViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_sheet_list_header, parent, false));                    case TYPE_ITEM:                        return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_sheet_list, parent, false));                    case TYPE_DIVIDER:                        return new DividerViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_sheet_divider, parent, false));                }        }        return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_sheet_list, parent, false));    }    @Override    public void onBindViewHolder(ViewHolder viewHolder, int position) {        OnSheetItemListener onSheetItemListener = onSheetItemListeners.get(position);        if (mode == ActionSheet.MODE_LIST) {            if (viewHolder.getItemViewType() == TYPE_ITEM) {                ((ItemViewHolder) viewHolder).configure((ActionSheetMenuItem) onSheetItemListener, itemGravity);            } else if (viewHolder.getItemViewType() == TYPE_HEADER) {                ((HeaderViewHolder) viewHolder).setData((ActionSheetHeader) onSheetItemListener);            } else if (viewHolder.getItemViewType() == TYPE_DIVIDER) {                ((DividerViewHolder) viewHolder).setData((ActionSheetDivider) onSheetItemListener);            }        } else {            ((ItemViewHolder) viewHolder).configure((ActionSheetMenuItem) onSheetItemListener, itemGravity);        }    }    @Override    public int getItemCount() {        return onSheetItemListeners.size();    }    class ViewHolder extends RecyclerView.ViewHolder {        ViewHolder(View itemView) {            super(itemView);        }    }    public class DividerViewHolder extends ViewHolder {        public View divider;        DividerViewHolder(View itemView) {            super(itemView);            divider = itemView;        }        public void setData(ActionSheetDivider actionSheetDivider) {            int background = actionSheetDivider.getBackground();            if (background != 0) {                divider.setBackgroundResource(background);            }        }    }    public class HeaderViewHolder extends ViewHolder {        public TextView textView;        HeaderViewHolder(View itemView) {            super(itemView);            textView = itemView.findViewById(R.id.textView);        }        public void setData(ActionSheetHeader actionSheetHeader) {            textView.setText(actionSheetHeader.getTitle());            int color = actionSheetHeader.getTextColor();            if (color != 0) {                textView.setTextColor(color);            }        }    }    public class ItemViewHolder extends ViewHolder implements View.OnClickListener {        public LinearLayout linearLayout;        public AppCompatImageView imageView;        public TextView textView;        ItemViewHolder(View itemView) {            super(itemView);            itemView.setOnClickListener(this);            linearLayout = itemView.findViewById(R.id.linearLayout);            imageView = itemView.findViewById(R.id.imageView);            textView = itemView.findViewById(R.id.textView);        }        public void configure(ActionSheetMenuItem actionSheetMenuItem, int itemGravity) {            if (actionSheetMenuItem.getIcon() != null) {                ViewUtil.Companion.getInstance().setViewVisible(imageView);                imageView.setImageDrawable(actionSheetMenuItem.getIcon());            } else {                ViewUtil.Companion.getInstance().setViewGone(imageView);            }            if (!TextUtils.isEmpty(actionSheetMenuItem.getTitle())) {                ViewUtil.Companion.getInstance().setViewVisible(textView);                textView.setText(actionSheetMenuItem.getTitle());                if (actionSheetMenuItem.getTextColor() != 0) {                    textView.setTextColor(actionSheetMenuItem.getTextColor());                } else {                    textView.setTextColor(Color.BLACK);                }            }            if (actionSheetMenuItem.getBackground() != 0) {                itemView.setBackgroundResource(actionSheetMenuItem.getBackground());            }            if (itemGravity != View.NO_ID) {                linearLayout.setGravity(itemGravity);            }        }        @Override        public void onClick(View v) {            ActionSheetMenuItem actionSheetMenuItem = (ActionSheetMenuItem) onSheetItemListeners.get(getLayoutPosition());            if (onMenuItemClickListener != null) {                onMenuItemClickListener.onMenuItemClick(actionSheetMenuItem.getMenuItem());            }        }    }}