package com.hynet.heebit.components.widget.chart.renderer.info;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.Paint.Align;import android.graphics.Paint.Style;import android.graphics.Path;import android.graphics.RectF;import android.text.TextUtils;import com.hynet.heebit.components.widget.chart.utils.DrawUtil;public class AnchorRender {    private static AnchorRender anchorRender = null;    private RectF rectF = null;    private Paint textPaint = null;    private Paint backgroundPaint = null;    public AnchorRender() {    }    public static synchronized AnchorRender getInstance() {        if (anchorRender == null) {            anchorRender = new AnchorRender();        }        return anchorRender;    }    public static void releaseInstance() {        if (anchorRender != null) {            anchorRender = null;        }    }    public void renderAnchor(Canvas canvas, AnchorDataPoint pAnchor, float cx, float cy, float cradius, float left, float top, float right, float bottom) {        if (null == pAnchor) return;        float radius = pAnchor.getRadius();        switch (pAnchor.getAreaStyle()) {            case FILL:                getBackgroundPaint().setStyle(Style.FILL);                break;            case STROKE:                getBackgroundPaint().setStyle(Style.STROKE);                break;        }        getBackgroundPaint().setColor(pAnchor.getBgColor());        float width = getBackgroundPaint().getStrokeWidth();        if (pAnchor.getLineWidth() > -1) {            getBackgroundPaint().setStrokeWidth(pAnchor.getLineWidth());        }        switch (pAnchor.getAnchorStyle()) {            case CAPRECT:            case CAPROUNDRECT:            case ROUNDRECT:                renderRoundRect(canvas, pAnchor, cx, cy, radius);                break;            default:                switch (pAnchor.getAnchorStyle()) {                    case RECT:                        renderRect(canvas, getBackgroundPaint(), radius, cx, cy);                        break;                    case CIRCLE:                        canvas.drawCircle(cx, cy, radius, getBackgroundPaint());                        break;                    case VLINE:                        //canvas.drawLine(cx, top,cx, bottom, getBackgroundPaint());                        DrawUtil.getInstance().drawLine(pAnchor.getLineStyle(), cx, top, cx, bottom, canvas, getBackgroundPaint());                        break;                    case HLINE:                        //canvas.drawLine(left, cy,right, cy, getBackgroundPaint());                        DrawUtil.getInstance().drawLine(pAnchor.getLineStyle(), left, cy, right, cy, canvas, getBackgroundPaint());                        break;                    case TOBOTTOM:                        //canvas.drawLine(cx, cy + cradius,cx,bottom, getBackgroundPaint());                        DrawUtil.getInstance().drawLine(pAnchor.getLineStyle(), cx, cy + cradius, cx, bottom, canvas, getBackgroundPaint());                        break;                    case TOTOP:                        //canvas.drawLine(cx, cy - cradius,cx, top, getBackgroundPaint());                        DrawUtil.getInstance().drawLine(pAnchor.getLineStyle(), cx, cy - cradius, cx, top, canvas, getBackgroundPaint());                        break;                    case TOLEFT:                        //canvas.drawLine(cx - cradius, cy,left, cy, getBackgroundPaint());                        DrawUtil.getInstance().drawLine(pAnchor.getLineStyle(), cx - cradius, cy, left, cy, canvas, getBackgroundPaint());                        break;                    case TORIGHT:                        //canvas.drawLine(cx + cradius, cy,right, cy, getBackgroundPaint());                        DrawUtil.getInstance().drawLine(pAnchor.getLineStyle(), cx + cradius, cy, right, cy, canvas, getBackgroundPaint());                        break;                    default:                }                if (!TextUtils.isEmpty(pAnchor.getAnchor())) {                    getTextPaint().setColor(pAnchor.getTextColor());                    getTextPaint().setTextSize(pAnchor.getTextSize());                    canvas.drawText(pAnchor.getAnchor(), cx, cy, getTextPaint());                }        }        getBackgroundPaint().setStrokeWidth(width);    }    private void renderRoundRect(Canvas canvas, AnchorDataPoint pAnchor, float cirX, float cirY, float radius) {        float angleW = pAnchor.getCapRectW() / 2;//20.f;        float angleH = pAnchor.getCapRectH(); //10.f;        float fontH = pAnchor.getCapRectHeight(); // angleH ; // + 5.f;        float extW = angleW + radius;        if (Float.compare(radius, angleW) == -1 || Float.compare(radius, angleW) == 0) {            extW = angleW + 30.f;        }        String anchor = pAnchor.getAnchor().trim();        if (!TextUtils.isEmpty(pAnchor.getAnchor())) {            float textHeight = DrawUtil.getInstance().getPaintFontHeight(getTextPaint()) + 30.f;            if (Float.compare(textHeight, fontH) == 1) fontH = textHeight;            float textWidth = DrawUtil.getInstance().getTextWidth(getTextPaint(), anchor);            if (Float.compare(textWidth, extW) == 1) extW = textWidth;        }        switch (pAnchor.getAnchorStyle()) {            case CAPRECT:                renderCapRect(canvas, pAnchor, cirX, cirY, radius, angleW, angleH, fontH, extW);                break;            case CAPROUNDRECT:                renderCapRound(canvas, pAnchor, cirX, cirY, radius, angleW, angleH, fontH, extW);                break;            case ROUNDRECT:                renderRound(canvas, pAnchor, cirX, cirY, radius, angleW, angleH, fontH, extW);                break;            default:        }        if (!TextUtils.isEmpty(pAnchor.getAnchor())) {            getTextPaint().setColor(pAnchor.getTextColor());            getTextPaint().setTextSize(pAnchor.getTextSize());            canvas.drawText(anchor, cirX, cirY - angleH - fontH / 3, getTextPaint());        }        textPaint = null;    }    private void renderCapRound(Canvas canvas, AnchorDataPoint pAnchor, float cirX, float cirY, float radius, float angleW, float angleH, float fontH, float extW) {        //round Rect这种强制bgPaint为fill        getBackgroundPaint().setStyle(Style.FILL);        renderRound(canvas, pAnchor, cirX, cirY, radius, angleW, angleH, fontH, extW);        renderCap(canvas, pAnchor, cirX, cirY, radius, angleW, angleH, fontH, extW);    }    private void renderCapRect(Canvas canvas, AnchorDataPoint pAnchor, float cirX, float cirY, float radius, float angleW, float angleH, float fontH, float extW) {        Path path = new Path();        path.moveTo(cirX, cirY);        path.lineTo(cirX - angleW, cirY - angleH);        path.lineTo(cirX - extW, cirY - angleH);        path.lineTo(cirX - extW, cirY - angleH - fontH);        path.lineTo(cirX + extW, cirY - angleH - fontH);        path.lineTo(cirX + extW, cirY - angleH);        path.lineTo(cirX + angleW, cirY - angleH);        path.lineTo(cirX, cirY);        path.close();        canvas.drawPath(path, getBackgroundPaint());        path.reset();    }    private void renderRound(Canvas canvas, AnchorDataPoint pAnchor, float cirX, float cirY, float radius, float angleW, float angleH, float fontH, float extW) {        if (null == rectF) rectF = new RectF();        rectF.left = cirX - extW;        rectF.top = cirY - angleH - fontH;        rectF.right = cirX + extW;        rectF.bottom = cirY - angleH;        getBackgroundPaint().setStyle(Style.FILL);        canvas.drawRoundRect(rectF, pAnchor.getRoundRadius(), pAnchor.getRoundRadius(), getBackgroundPaint());        rectF.setEmpty();    }    private void renderCap(Canvas canvas, AnchorDataPoint pAnchor, float cirX, float cirY, float radius, float angleW, float angleH, float fontH, float extW) {        Path path = new Path();        path.moveTo(cirX, cirY);        path.lineTo(cirX - angleW, cirY - angleH);        path.lineTo(cirX + angleW, cirY - angleH);        path.close();        canvas.drawPath(path, getBackgroundPaint());        path.reset();    }    private void renderRect(Canvas canvas, Paint paint, float radius, float cirX, float cirY) {        if (null == rectF) rectF = new RectF();        rectF.left = (cirX - radius);        rectF.top = (cirY - radius);        rectF.right = (cirX + radius);        rectF.bottom = (cirY + radius);        canvas.drawRect(rectF, getBackgroundPaint());        rectF.setEmpty();    }    private Paint getTextPaint() {        if (null == textPaint) {            textPaint = new Paint(Paint.ANTI_ALIAS_FLAG);            textPaint.setTextAlign(Align.CENTER);        }        return textPaint;    }    private Paint getBackgroundPaint() {        if (null == backgroundPaint) backgroundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        backgroundPaint.setStrokeWidth(2);        return backgroundPaint;    }}