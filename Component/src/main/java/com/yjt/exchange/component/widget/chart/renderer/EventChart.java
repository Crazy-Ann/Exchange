package com.hynet.heebit.components.widget.chart.renderer;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.PointF;import android.graphics.RectF;import com.hynet.heebit.components.widget.chart.constant.ChartType;import com.hynet.heebit.components.widget.chart.event.click.ArcPosition;import com.hynet.heebit.components.widget.chart.event.click.BarPosition;import com.hynet.heebit.components.widget.chart.event.click.PlotArcPosition;import com.hynet.heebit.components.widget.chart.event.click.PlotBarPosition;import com.hynet.heebit.components.widget.chart.event.click.PlotPointPosition;import com.hynet.heebit.components.widget.chart.event.click.PointPosition;import com.hynet.heebit.components.widget.chart.event.click.PositionRecord;import com.hynet.heebit.components.widget.chart.renderer.info.ToolTip;import com.hynet.heebit.components.widget.chart.renderer.info.ToolTipRender;import com.hynet.heebit.components.widget.chart.utils.DrawUtil;import com.hynet.heebit.components.widget.chart.utils.MathUtil;import java.util.ArrayList;import java.util.Iterator;public class EventChart extends XChart {    private boolean click = false;    private int value = 0;    private ArrayList records = null;    private int selectID = -1;    private int selectDataID = -1;    private int selectDataChildID = -1;    private boolean showClikedFocus = false;    private Paint focusPaint = null;    private PointF focusPoint = null;    private float focusRadius = 0.0f;    private RectF focusRect = null;    private ArcPosition arcPosition = null;    private boolean focusArcSelect = false;    private ToolTipRender toolTipRender = null;    public EventChart() {        initializePositionRecord();    }    /**     * 激活点击事件     */    public void activeListenItemClick() {        click = true;    }    /**     * 禁用点击事件     */    public void deactiveListenItemClick() {        click = false;    }    /**     * 返回事件处理状态     *     * @return 是否激活     */    public boolean getListenItemClickStatus() {        return click;    }    /**     * 返回记录集     *     * @return 记录集     */    public ArrayList<PositionRecord> getPositionRecordset() {        return records;    }    /**     * 是点对点击选中对象显示相关焦点标识     */    public void showClikedFocus() {        showClikedFocus = true;    }    private void clearSelected() {        selectID = -1;        selectDataID = -1;        selectDataChildID = -1;    }    private void saveSelected(int recordID, int dataID, int dataChildID) {        selectID = recordID;        selectDataID = dataID;        selectDataChildID = dataChildID;    }    protected int getSelected() {        return selectID;    }    protected void savePointRecord(final int dataID, final int childID, final float x, final float y, final RectF r) {        if (!getListenItemClickStatus())            return;        savePointRecord(dataID, childID, x, y, r.left, r.top, r.right, r.bottom);    }    protected void savePointRecord(final int dataID, final int childID, float x, float y, float left, float top, float right, float bottom) {        if (!getListenItemClickStatus())            return;        if (null == records)            records = new ArrayList<PlotPointPosition>();        PlotPointPosition pRecord = new PlotPointPosition();        pRecord.savePlotDataID(dataID);        pRecord.savePlotDataChildID(childID);        pRecord.savePlotPosition(x, y);        pRecord.savePlotRectF(left, top, right, bottom);        pRecord.extPointClickRange(value);        records.add(pRecord);    }    protected void saveBarRectFRecord(int dataID, int childID, float left, float top, float right, float bottom) {        if (!getListenItemClickStatus())            return;        if (null == records)            records = new ArrayList<PlotBarPosition>();        PlotBarPosition pRecord = new PlotBarPosition();        pRecord.savePlotDataID(dataID);        pRecord.savePlotDataChildID(childID);        pRecord.savePlotRectF(left, top, right, bottom);        pRecord.extPointClickRange(value);        records.add(pRecord);    }    protected void saveBarRecord(int dataID, int childID, float x, float y, RectF r) {        if (!getListenItemClickStatus())            return;        if (null == records)            records = new ArrayList<PlotBarPosition>();        PlotBarPosition pRecord = new PlotBarPosition();        pRecord.savePlotDataID(dataID);        pRecord.savePlotDataChildID(childID);        pRecord.savePlotRectF(r);        pRecord.extPointClickRange(value);        records.add(pRecord);    }    // 保存角度 (半径)    protected void saveArcRecord(int dataID, float centerX, float centerY, float radius, float offsetAngle, float Angle, float selectedOffset, float initialAngle) {        if (!getListenItemClickStatus())            return;        if (null == records)            records = new ArrayList<PlotArcPosition>();        PlotArcPosition pRecord = new PlotArcPosition();        pRecord.savePlotDataID(dataID);        pRecord.savePlotCirXY(centerX, centerY);        pRecord.saveAngle(radius, offsetAngle, Angle, selectedOffset);        pRecord.saveInitialAngle(initialAngle);        records.add(pRecord);    }    /**     * 为了让触发更灵敏，可以扩大指定px的点击监听范围     *     * @param value 扩大多少点击监听范围     */    public void extPointClickRange(int value) {        this.value = value;    }    /**     * 检查是否点击在处理范围内     *     * @param x 当前点击点X坐标     * @param y 当前点击点Y坐标     *     * @return 是否需处理     */    public boolean isPlotClickArea(float x, float y) {        if (!getListenItemClickStatus())            return false;        if (Float.compare(x, getPlotArea().getLeft()) == -1)            return false;        if (Float.compare(x, getPlotArea().getRight()) == 1)            return false;        if (Float.compare(y, getPlotArea().getTop()) == -1)            return false;        if (Float.compare(y, getPlotArea().getBottom()) == 1)            return false;        return true;    }    /**     * 返回对应的记录     *     * @param x 当前点击点X坐标     * @param y 当前点击点Y坐标     *     * @return 记录类     */    protected ArcPosition getArcRecord(float x, float y) {        if (!getListenItemClickStatus())            return null;        if (!isPlotClickArea(x, y))            return null;        if (!getClikedScaleStatus())            return null;        if (null == records)            return null;        Iterator iterator = records.iterator();        while (iterator.hasNext()) {            PlotArcPosition record = (PlotArcPosition) iterator.next();            if (record.compareF(x, y)) {                saveSelected(record.getRecordID(), record.getDataID(), record.getDataChildID());                return record;            }        }        clearSelected();        return null;    }    protected BarPosition getBarRecord(float x, float y) {        if (!getListenItemClickStatus())            return null;        if (!isPlotClickArea(x, y))            return null;        if (!getClikedScaleStatus())            return null;        if (null == records)            return null;        Iterator iterator = records.iterator();        while (iterator.hasNext()) {            PlotBarPosition record = (PlotBarPosition) iterator.next();            if (record.compareF(x, y)) {                saveSelected(record.getRecordID(), record.getDataID(), record.getDataChildID());                return record;            }        }        clearSelected();        return null;    }    protected PointPosition getPointRecord(final float x, final float y) {        if (!getListenItemClickStatus())            return null;        if (!isPlotClickArea(x, y))            return null;        if (!getClikedScaleStatus())            return null;        if (null == records)            return null;        Iterator iterator = records.iterator();        while (iterator.hasNext()) {            PlotPointPosition record = (PlotPointPosition) iterator.next();            if (record.compareF(x, y)) {                saveSelected(record.getRecordID(), record.getDataID(), record.getDataChildID());                return record;            }        }        clearSelected();        return null;    }    protected void initializePositionRecord() {        if (null != records) {            records.clear();            records = null;        }    }    /**     * 开放焦点画笔     *     * @return 画笔     */    public Paint getFocusPaint() {        if (null == focusPaint)            focusPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        return focusPaint;    }    /**     * 点的焦点参数     *     * @param point  点     * @param radius 半径     */    public void showFocusPointF(PointF point, float radius) {        focusPoint = point;        focusRadius = radius;    }    /**     * 柱形类的焦点参数     *     * @param rect 柱形     */    public void showFocusRectF(RectF rect) {        focusRect = rect;    }    /**     * 图，扇形类的焦点参数     *     * @param arc 扇形选中类     */    public void showFocusArc(ArcPosition arc) {        showFocusArc(arc, false);    }    public void showFocusArc(ArcPosition arc, boolean selected) {        arcPosition = arc;        focusArcSelect = selected;    }    /**     * 开放提示信息类     *     * @return 信息基类     */    public ToolTip getToolTip() {        if (null == toolTipRender)            toolTipRender = new ToolTipRender();        return toolTipRender;    }    /**     * 绘制提示信息     *     * @param canvas 画布     */    protected void renderToolTip(Canvas canvas) {        if (null == toolTipRender)            return;        toolTipRender.renderInfo(canvas);    }    protected boolean drawFocusRect(Canvas canvas, int dataID, int childID, float left, float top, float right, float bottom) {        if (!showClikedFocus)            return true;        if (-1 == selectID)            return false;        if (null == focusRect)            return false;        if (selectDataID == dataID && selectDataChildID == childID) {            focusRect.left = left;            focusRect.top = top;            focusRect.right = right;            focusRect.bottom = bottom;            canvas.drawRect(focusRect, getFocusPaint());            focusRect.setEmpty();            clearSelected();        }        return true;    }    /**     * 绘制焦点形状     *     * @param canvas 画布     *     * @return 是否绘制成功     */    protected boolean renderFocusShape(Canvas canvas) {        if (!showClikedFocus)            return true;        ChartType ctype = this.getType();        if (ChartType.BAR == ctype || ChartType.BAR3D == ctype || ChartType.STACKBAR == ctype) {            return true;        }        if (null != focusPoint) {            canvas.drawCircle(focusPoint.x, focusPoint.y, focusRadius, getFocusPaint());            focusPoint = null;            focusRadius = 0.0f;        } else if (null != focusRect) {        } else if (null != arcPosition) {            PointF pointCir = arcPosition.getPointF();            float cirX = pointCir.x, cirY = pointCir.y;            float radius = arcPosition.getRadius();            if (focusArcSelect) {                // 偏移圆心点位置(默认偏移半径的1/10)                float newRadius = div(radius, arcPosition.getSelectedOffset());                // 计算百分比标签                PointF point = MathUtil.getInstance().calcArcEndPointXY(cirX, cirY, newRadius, add(arcPosition.getStartAngle(), arcPosition.getSweepAngle() / 2f));                cirX = point.x;                cirY = point.y;            }            DrawUtil.getInstance().drawPercent(canvas, getFocusPaint(), cirX, cirY, radius, arcPosition.getStartAngle(), arcPosition.getSweepAngle(), true);            arcPosition = null;        } else {            return false;        }        return true;    }    @Override    protected boolean postRender(Canvas canvas) {        // 绘制图表        super.postRender(canvas);        // 清理        initializePositionRecord();        return true;    }}