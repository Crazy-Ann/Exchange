package com.hynet.heebit.components.widget.chart.renderer.plot;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Paint.Style;import android.graphics.Shader;import com.hynet.heebit.components.widget.chart.constant.Direction;public class PlotArea {    //主图表区范围    protected float left = 0.0f;    protected float top = 0.0f;    protected float right = 0.0f;    protected float bottom = 0.0f;    private float width = 0.0f;    private float height = 0.0f;    //主图表区背景色,即画X轴与Y轴围成的区域    private Paint backgroundPaint = null;    //是否画背景色    private boolean backgroundColorVisible = false;    //扩展宽度    private float extraWidth = 0.0f;    //是否应用渲染模式    private boolean applayGradient = false;    private int beginColor = Color.WHITE;    private int endColor = Color.WHITE;    private Shader.TileMode tileMode = Shader.TileMode.MIRROR;    private Direction direction = Direction.VERTICAL;    public PlotArea() {    }    private void initBackgroundPaint() {        if (null == backgroundPaint) {            backgroundPaint = new Paint();            backgroundPaint.setStyle(Style.FILL);            backgroundPaint.setColor(Color.WHITE);        }    }    /**     * 开放主图表区背景画笔，即画X轴与Y轴围成的区域的背景画笔。     *     * @return 画笔     */    public Paint getBackgroundPaint() {        initBackgroundPaint();        return backgroundPaint;    }    /**     * 设置是否显示背景色     *     * @param visible 是否显示背景色     */    public void setBackgroundColorVisible(boolean visible) {        backgroundColorVisible = visible;    }    /**     * 返回是否显示背景色     *     * @return 是否显示背景色     */    public boolean getBackgroundColorVisible() {        return backgroundColorVisible;    }    /**     * 设置是否显示背景色及其背景色的值     *     * @param visible 是否显示背景色     * @param color   背景色     */    public void setBackgroundColor(boolean visible, int color) {        backgroundColorVisible = visible;        getBackgroundPaint().setColor(color);        setBeginColor(color);        setEndColor(color);    }    /**     * 绘图区左边位置X坐标     *     * @return X坐标     */    public float getLeft() {        return left;    }    public float getPlotLeft() {        return left;    }    /**     * 绘图区上方Y坐标     *     * @return Y坐标     */    public float getTop() {        return top;    }    public float getPlotTop() {        return top;    }    /**     * 绘图区下方Y坐标     *     * @return Y坐标     */    public float getBottom() {        return bottom;    }    public float getPlotBottom() {        return bottom;    }    /**     * 绘图区右边位置X坐标     *     * @return X坐标     */    public float getRight() {        return right;    }    public float getPlotRight() {        return (right + extraWidth);    }    /**     * 绘图区宽度     *     * @return 宽度     */    public float getWidth() {        width = Math.abs(right - left);        return width;    }    public float getPlotWidth() {        return Math.abs(right + extraWidth - left);    }    /**     * 绘图区高度     *     * @return 高度     */    public float getHeight() {        height = Math.abs(getBottom() - getTop());        return height;    }    public float getPlotHeight() {        height = Math.abs(getPlotBottom() - getPlotTop());        return height;    }    /**     * 扩展绘图区的实际宽度,用来处理需要很大显示范围的图表     *     * @param width 宽度     */    public void extWidth(float width) {        extraWidth = width;    }    public float getExtWidth() {        return extraWidth;    }    /**     * 设置 是否应用渲染模式     */    public void setApplayGradient(boolean status) {        applayGradient = status;    }    /**     * 返回是否应用渲染模式     *     * @return 状态     */    public boolean getApplayGradient() {        return applayGradient;    }    /**     * 设置渐变渲染方向     *     * @param direction 方向     */    public void setGradientDirection(Direction direction) {        this.direction = direction;    }    /**     * 返回渐变渲染方向     *     * @return 方向     */    public Direction getGradientDirection() {        return direction;    }    /**     * 设置渲染模式     *     * @param tm 渲染模式     */    public void setGradientMode(Shader.TileMode tm) {        tileMode = tm;    }    /**     * 返回渲染模式     *     * @return 渲染模式     */    public Shader.TileMode getGradientMode() {        return tileMode;    }    /**     * 设置起始颜色     *     * @param color 颜色     */    public void setBeginColor(int color) {        beginColor = color;    }    /**     * 设置结束颜色     *     * @param color 颜色     */    public void setEndColor(int color) {        endColor = color;    }    /**     * 返回起始颜色     *     * @return 颜色     */    public int getBeginColor() {        return beginColor;    }    /**     * 返回结束颜色     *     * @return 颜色     */    public int getEndColor() {        return endColor;    }}