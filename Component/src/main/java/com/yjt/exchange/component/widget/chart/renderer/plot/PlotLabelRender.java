package com.hynet.heebit.components.widget.chart.renderer.plot;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.RectF;import android.text.TextUtils;import com.hynet.heebit.components.widget.chart.constant.LabelBoxStyle;import com.hynet.heebit.components.widget.chart.utils.DrawUtil;public class PlotLabelRender extends PlotLabel {    private RectF rectF = null;    private int borderColor = -1;    public PlotLabelRender() {    }    @Override    public boolean drawLabel(Canvas canvas, Paint paint, String label, float cX, float cY, float itemAngle, int borderColor) {        this.borderColor = borderColor;        return drawLabel(canvas, paint, label, cX, cY, itemAngle);    }    @Override    public boolean drawLabel(Canvas canvas, Paint paint, String label, float cX, float cY, float itemAngle) {        if (TextUtils.isEmpty(label)) return false;        if (null == canvas || null == paint) return false;        float left = 0.0f, top = 0.0f, right = 0.0f, bottom = 0.0f;        float w = getLabelWidth(paint, label);        float h = getLabelHeight(paint);        float x = cX + offsetX;        float y = cY - offsetY;        if (LabelBoxStyle.TEXT == labelBoxStyle) {            DrawUtil.getInstance().drawRotateText(label, x, y - margin, itemAngle, canvas, paint);            return true;        }        if (LabelBoxStyle.CIRCLE == labelBoxStyle) {            initializeBox();            float radius = this.radius;            if (Float.compare(this.radius, 0.f) == 0 || Float.compare(this.radius, 0.f) == -1) {                try {                    radius = Math.max(w, h);                    radius = radius / 2 + 5.f;                } catch (Exception ex) {                    radius = 25;                }            }            y = y - margin - radius;            canvas.drawCircle(x, y, radius, borderRender.getBackgroundPaint());            if (showBoxBorder)                canvas.drawCircle(x, y, radius, borderRender.getLinePaint());            DrawUtil.getInstance().drawRotateText(label, x, y, itemAngle, canvas, paint);            return true;        } else {            left = x - w / 2 - margin;            right = x + w / 2 + margin;            top = y - h - margin;            bottom = y;            if (null == rectF) rectF = new RectF();            rectF.left = left;            rectF.right = right;            rectF.top = top;            rectF.bottom = bottom;            if (LabelBoxStyle.RECT == labelBoxStyle) {                drawBox(canvas);                DrawUtil.getInstance().drawRotateText(label, x, y - margin, itemAngle, canvas, paint);            } else {                float AngleH = rectF.width() * scale; //0.2f ;                rectF.top -= AngleH;                rectF.bottom -= AngleH;                initializeBox();                if (borderColor != -1) borderRender.setBorderLineColor(borderColor);                switch (labelBoxStyle) {                    case CAPRECT:                        borderRender.renderCapRect(canvas, rectF, AngleH, showBoxBorder, showBackground);                        break;                    case CAPROUNDRECT:                        borderRender.renderCapRound(canvas, rectF, AngleH, showBoxBorder, showBackground);                        break;                    case ROUNDRECT:                        borderRender.renderRound(canvas, rectF, AngleH, showBoxBorder, showBackground);                        break;                    default:                }                DrawUtil.getInstance().drawRotateText(label, x, y - margin - AngleH, itemAngle, canvas, paint);            }            rectF.setEmpty();        }        return true;    }    private float getLabelWidth(Paint paint, String label) {        return DrawUtil.getInstance().getTextWidth(paint, label);    }    private float getLabelHeight(Paint paint) {        return DrawUtil.getInstance().getPaintFontHeight(paint);    }    private void drawBox(Canvas canvas) {        initializeBox();        if (borderColor != -1) borderRender.setBorderLineColor(borderColor);        borderRender.renderRect(canvas, rectF, showBoxBorder, showBackground);    }}