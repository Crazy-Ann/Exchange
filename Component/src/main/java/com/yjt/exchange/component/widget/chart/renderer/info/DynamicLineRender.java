package com.hynet.heebit.components.widget.chart.renderer.info;import android.graphics.Canvas;import com.hynet.heebit.components.widget.chart.utils.DrawUtil;public class DynamicLineRender extends DynamicLine {    private float left = 0.0f;    private float top = 0.0f;    private float right = 0.0f;    private float bottom = 0.0f;    public DynamicLineRender() {    }    // Cross 指定交叉的水平线和垂直线。    // BackwardDiagonal 从右上到左下的对角线的线条图案。    // Vertical		垂直线    // Horizontal 水平线    private void drawCross(Canvas canvas) {        //竖线        drawVertical(canvas);        //横线        drawHorizontal(canvas);    }    private void drawBackwardDiagonal(Canvas canvas) {        //竖线        DrawUtil.getInstance().drawLine(getLineDrawStyle(), centerXY.x, centerXY.y, centerXY.x, bottom, canvas, getLinePaint());        //横线        DrawUtil.getInstance().drawLine(getLineDrawStyle(), left, centerXY.y, centerXY.x, centerXY.y, canvas, getLinePaint());    }    private void drawVertical(Canvas canvas) //竖线    {        DrawUtil.getInstance().drawLine(getLineDrawStyle(), centerXY.x, top, centerXY.x, bottom, canvas, getLinePaint());    }    private void drawHorizontal(Canvas canvas) {        DrawUtil.getInstance().drawLine(getLineDrawStyle(), left, centerXY.y, right, centerXY.y, canvas, getLinePaint());    }    public void renderLine(Canvas canvas, float left, float top, float right, float bottom) {        if (null == centerXY) return;        if (Float.compare(centerXY.x, left) == 0 || Float.compare(centerXY.x, left) == -1 || Float.compare(centerXY.x, right) == 0 || Float.compare(centerXY.x, right) == 1 || Float.compare(centerXY.y, top) == 0 || Float.compare(centerXY.y, top) == -1 || Float.compare(centerXY.y, bottom) == 0 || Float.compare(centerXY.y, bottom) == 1)            return;        this.left = left;        this.top = top;        this.right = right;        this.bottom = bottom;        switch (getDyLineStyle()) {            case CROSS:                drawCross(canvas);                break;            case BACKWARDDIAGONAL:                drawBackwardDiagonal(canvas);                break;            case VERTICAL:                drawVertical(canvas);                break;            case HORIZONTAL:                drawHorizontal(canvas);                break;        }    }}